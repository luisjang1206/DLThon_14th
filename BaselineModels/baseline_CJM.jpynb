{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "a7uhNxnfjoiE"
      ],
      "gpuType": "A100",
      "machine_shape": "hm"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "3e22733ad67745df804e391e05dad5c5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_27bbb63e19854c679a010a41359b9bfa",
              "IPY_MODEL_f9b3549ae94b4ab48e407a5e5cc252d7",
              "IPY_MODEL_31f38382fe684f1c89f4b5225d2be4fa"
            ],
            "layout": "IPY_MODEL_5421ce5316d344fdb02635fe90d66da8"
          }
        },
        "27bbb63e19854c679a010a41359b9bfa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ba1c5c1350b64b88ba5acd2263de382a",
            "placeholder": "​",
            "style": "IPY_MODEL_1b15d6af3f8e498c818a76bc17ec283a",
            "value": "Map (num_proc=4): 100%"
          }
        },
        "f9b3549ae94b4ab48e407a5e5cc252d7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f0b77217e66f4d8fa93d78c9b68fe640",
            "max": 4189,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_13e57dbdbf4f4a5781d88c31edb0c230",
            "value": 4189
          }
        },
        "31f38382fe684f1c89f4b5225d2be4fa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5e7c0a513bd64315b9c39edf12430170",
            "placeholder": "​",
            "style": "IPY_MODEL_dd6161d550e4424f82f82220e59a6633",
            "value": " 4189/4189 [00:00&lt;00:00, 7858.95 examples/s]"
          }
        },
        "5421ce5316d344fdb02635fe90d66da8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ba1c5c1350b64b88ba5acd2263de382a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1b15d6af3f8e498c818a76bc17ec283a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f0b77217e66f4d8fa93d78c9b68fe640": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "13e57dbdbf4f4a5781d88c31edb0c230": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "5e7c0a513bd64315b9c39edf12430170": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "dd6161d550e4424f82f82220e59a6633": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f8300f446a964ad6a97dbadc1b2c228b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_84f14f7b6e314655af8db8fa0a7ae9b5",
              "IPY_MODEL_0136e56de3244c65b1beb6330e645b35",
              "IPY_MODEL_a3abc1d054b44e0e90d3491ab9fe5c3c"
            ],
            "layout": "IPY_MODEL_8074871b36ec4ff285a04e0307fc345d"
          }
        },
        "84f14f7b6e314655af8db8fa0a7ae9b5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1064b868fefc4030961d460db4d6111e",
            "placeholder": "​",
            "style": "IPY_MODEL_948ff56819644080935f5a590071e66f",
            "value": "Map (num_proc=4): 100%"
          }
        },
        "0136e56de3244c65b1beb6330e645b35": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d4df063782b34a1cb0136bb12112cc67",
            "max": 740,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_7dfb5007e89a4ec498fe6adc51d9b111",
            "value": 740
          }
        },
        "a3abc1d054b44e0e90d3491ab9fe5c3c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_971b813874a142f99687169f583d40f6",
            "placeholder": "​",
            "style": "IPY_MODEL_39c2cf3ef38e476eb11534ce298108e9",
            "value": " 740/740 [00:00&lt;00:00, 655.83 examples/s]"
          }
        },
        "8074871b36ec4ff285a04e0307fc345d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1064b868fefc4030961d460db4d6111e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "948ff56819644080935f5a590071e66f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d4df063782b34a1cb0136bb12112cc67": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7dfb5007e89a4ec498fe6adc51d9b111": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "971b813874a142f99687169f583d40f6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "39c2cf3ef38e476eb11534ce298108e9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f9af9572a4e149a2a467027654ffc941": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_1ead4b2cd15e4d8b9422312063b30264",
              "IPY_MODEL_19157c73984542d69232de1c95d98f73",
              "IPY_MODEL_25aaceccce844618b3e02752693c5dab"
            ],
            "layout": "IPY_MODEL_0bf61157ffdb44df89cce22a1afc9993"
          }
        },
        "1ead4b2cd15e4d8b9422312063b30264": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0e847aeaf6324bb8a89a827cd24467da",
            "placeholder": "​",
            "style": "IPY_MODEL_3211e43810034d8cb191e0c8a7a42fda",
            "value": "Epoch 1/10: 100%"
          }
        },
        "19157c73984542d69232de1c95d98f73": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1c546f6c7f4f4f668ba7df0f20adc5d9",
            "max": 66,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_314aab8f6d534684aa05ee0ac8eccafc",
            "value": 66
          }
        },
        "25aaceccce844618b3e02752693c5dab": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_37cfdd62366a4852a3a157b0f81008fd",
            "placeholder": "​",
            "style": "IPY_MODEL_7b14cd3202234af381b8644813b78ffd",
            "value": " 66/66 [00:03&lt;00:00, 21.16it/s, loss=1.34]"
          }
        },
        "0bf61157ffdb44df89cce22a1afc9993": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0e847aeaf6324bb8a89a827cd24467da": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3211e43810034d8cb191e0c8a7a42fda": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1c546f6c7f4f4f668ba7df0f20adc5d9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "314aab8f6d534684aa05ee0ac8eccafc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "37cfdd62366a4852a3a157b0f81008fd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7b14cd3202234af381b8644813b78ffd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "### 한글폰트"
      ],
      "metadata": {
        "id": "a7uhNxnfjoiE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!sudo apt-get update -qq # 폰트 설정을 위한 코드\n",
        "!sudo apt-get install fonts-nanum* -qq\n",
        "!sudo fc-cache -fv"
      ],
      "metadata": {
        "collapsed": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SWtk4MdSiHrD",
        "outputId": "c15f4469-15d0-4774-c9b7-359244c3add1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "W: Skipping acquire of configured file 'main/source/Sources' as repository 'https://r2u.stat.illinois.edu/ubuntu jammy InRelease' does not seem to provide it (sources.list entry misspelt?)\n",
            "/usr/share/fonts: caching, new cache contents: 0 fonts, 1 dirs\n",
            "/usr/share/fonts/truetype: caching, new cache contents: 0 fonts, 3 dirs\n",
            "/usr/share/fonts/truetype/humor-sans: caching, new cache contents: 1 fonts, 0 dirs\n",
            "/usr/share/fonts/truetype/liberation: caching, new cache contents: 16 fonts, 0 dirs\n",
            "/usr/share/fonts/truetype/nanum: caching, new cache contents: 39 fonts, 0 dirs\n",
            "/usr/local/share/fonts: caching, new cache contents: 0 fonts, 0 dirs\n",
            "/root/.local/share/fonts: skipping, no such directory\n",
            "/root/.fonts: skipping, no such directory\n",
            "/usr/share/fonts/truetype: skipping, looped directory detected\n",
            "/usr/share/fonts/truetype/humor-sans: skipping, looped directory detected\n",
            "/usr/share/fonts/truetype/liberation: skipping, looped directory detected\n",
            "/usr/share/fonts/truetype/nanum: skipping, looped directory detected\n",
            "/var/cache/fontconfig: cleaning cache directory\n",
            "/root/.cache/fontconfig: not cleaning non-existent cache directory\n",
            "/root/.fontconfig: not cleaning non-existent cache directory\n",
            "fc-cache: succeeded\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.font_manager as fm\n",
        "\n",
        "# 나눔 폰트 설치 경로 확인\n",
        "font_path = '/usr/share/fonts/truetype/nanum/NanumGothic.ttf'\n",
        "\n",
        "# 폰트 매니저에 폰트 추가\n",
        "font_prop = fm.FontProperties(fname=font_path)\n",
        "plt.rc('font', family=font_prop.get_name())"
      ],
      "metadata": {
        "id": "LVj8we0YjTzJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.plot([1, 2, 3], [4, 5, 6])\n",
        "plt.title('한글 제목') # 한글 제목이 정상적으로 표시되는지 확인\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "id": "eRsv-ucajRVL",
        "outputId": "81eeb2b5-5dea-4bb3-8eaf-2f69401f9cad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 데이터 다운로드"
      ],
      "metadata": {
        "id": "szn6rKHOgAZL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!sudo apt-get update -qq # 폰트 설정을 위한 코드\n",
        "!sudo apt-get install fonts-nanum* -qq\n",
        "!sudo fc-cache -fv"
      ],
      "metadata": {
        "id": "QI3Fo0YJtk3q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DkiNMLWztUUh",
        "outputId": "6b65b79f-8c21-4cab-cd44-745fe200c978"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%cd /content/drive/MyDrive"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oyjABJhVtgXt",
        "outputId": "6b3154dd-a430-40ae-990f-0665a695d8cc"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/MyDrive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "! pwd"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l332dRxYtmE2",
        "outputId": "7a61f4cc-64da-4625-bbbf-bac4d28de5a1"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/MyDrive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 데이터 처리"
      ],
      "metadata": {
        "id": "LBJSX2CQgD0Y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "def add_conversation_to_train(\n",
        "    train_data: pd.DataFrame,\n",
        "    conv_csv_path: str,\n",
        "    frac: float = 1.0,          # conversation.csv 중 사용할 비율 (0~1)\n",
        "    shuffle: bool = True,\n",
        "    random_state: int = 42,\n",
        "    drop_dup_on_text: bool = False  # 텍스트 기준 중복 제거 여부\n",
        ") -> pd.DataFrame:\n",
        "    \"\"\"\n",
        "    conversation.csv에서 frac 비율만 샘플링해 train_data에 바로 합친다(디스크 저장 X).\n",
        "    - idx 충돌 방지: 새로 추가되는 행들에 고유 idx를 부여해서 병합\n",
        "    - 컬럼 정렬: train_data의 컬럼 순서를 기준으로 맞춤\n",
        "    \"\"\"\n",
        "\n",
        "    # 1) conversation.csv 로드 (헤더 동일 가정)\n",
        "    conv_df = pd.read_csv(conv_csv_path, index_col='idx')\n",
        "\n",
        "    # 2) 컬럼 정렬/체크 (train_data 기준으로 맞춤)\n",
        "    #    만약 순서가 다를 수 있으니 train_data.columns 순서로 재정렬\n",
        "    missing_cols = [c for c in train_data.columns if c not in conv_df.columns]\n",
        "    if missing_cols:\n",
        "        raise ValueError(f\"conversation.csv에 없는 컬럼: {missing_cols}\")\n",
        "    conv_df = conv_df[train_data.columns]\n",
        "\n",
        "    # 3) 필요 비율만 샘플링\n",
        "    if not (0.0 < frac <= 1.0):\n",
        "        raise ValueError(\"frac 은 (0, 1] 범위여야 합니다.\")\n",
        "    if frac < 1.0:\n",
        "        conv_df = conv_df.sample(frac=frac, random_state=random_state)\n",
        "\n",
        "    # 4) (선택) 텍스트 중복 제거\n",
        "    #    텍스트 컬럼명이 무엇인지 train_data에서 추정 (보통 'text' 또는 'conversation')\n",
        "    text_col = None\n",
        "    for c in train_data.columns:\n",
        "        # 라벨 컬럼은 '일반 대화' 같은 값이므로 길이가 상대적으로 짧음 → 텍스트 후보는 문장 길이가 긴 문자열 컬럼\n",
        "        if train_data[c].dtype == 'object':\n",
        "            # 대충 평균 길이로 텍스트 후보를 heuristic 판단\n",
        "            if train_data[c].astype(str).str.len().mean() > 15:\n",
        "                text_col = c\n",
        "                break\n",
        "    # fallback: 첫 번째 object 컬럼을 텍스트로 가정\n",
        "    if text_col is None:\n",
        "        for c in train_data.columns:\n",
        "            if train_data[c].dtype == 'object':\n",
        "                text_col = c\n",
        "                break\n",
        "\n",
        "    if drop_dup_on_text and text_col is not None:\n",
        "        # 기존 train과 새 conv 합쳐 중복 텍스트 제거 → 새로 추가할 것만 남김\n",
        "        before = len(conv_df)\n",
        "        conv_df = conv_df[~conv_df[text_col].isin(train_data[text_col])]\n",
        "        # 필요하면 conv_df 내부 중복도 제거\n",
        "        conv_df = conv_df.drop_duplicates(subset=[text_col], keep='first')\n",
        "        print(f\"[중복제거] 기존 {before} → 추가 대상 {len(conv_df)} (텍스트 기준)\")\n",
        "\n",
        "    if len(conv_df) == 0:\n",
        "        print(\"[알림] 추가할 샘플이 없습니다.\")\n",
        "        return train_data\n",
        "\n",
        "    # 5) idx 충돌 방지용 새 인덱스 생성\n",
        "    #    - 숫자 인덱스면 max+1부터, 문자열이면 'g_000001' 시리즈\n",
        "    def _make_new_idx(existing_index: pd.Index, n_new: int) -> pd.Index:\n",
        "        if np.issubdtype(existing_index.dtype, np.number):\n",
        "            start = (existing_index.max() + 1) if len(existing_index) > 0 else 0\n",
        "            return pd.Index(range(start, start + n_new), name=existing_index.name or 'idx')\n",
        "        else:\n",
        "            start = len(existing_index)\n",
        "            return pd.Index([f\"g_{i:06d}\" for i in range(start, start + n_new)],\n",
        "                            name=existing_index.name or 'idx')\n",
        "\n",
        "    new_idx = _make_new_idx(train_data.index, len(conv_df))\n",
        "    conv_df = conv_df.copy()\n",
        "    conv_df.index = new_idx\n",
        "\n",
        "    # 6) (선택) 셔플\n",
        "    if shuffle:\n",
        "        conv_df = conv_df.sample(frac=1.0, random_state=random_state)\n",
        "\n",
        "    # 7) 바로 메모리에서 concat (저장 X)\n",
        "    merged = pd.concat([train_data, conv_df], axis=0)\n",
        "\n",
        "    # 8) 정보 출력\n",
        "    print(f\"[merge] train: {len(train_data)}  +  add: {len(conv_df)}  ->  merged: {len(merged)}\")\n",
        "    return merged\n"
      ],
      "metadata": {
        "id": "uGdHv1Yb5Z7d"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# 데이터 읽기\n",
        "train_data = pd.read_csv('data/training.csv', index_col='idx')\n",
        "test_data = pd.read_csv('data/test.csv', index_col='idx')\n",
        "\n",
        "# # conversation.csv에서 40%만 샘플링해서 추가 (텍스트 중복 제거 ON)\n",
        "# train_data = add_conversation_to_train(\n",
        "#     train_data,\n",
        "#     conv_csv_path='data/conversations.csv',\n",
        "#     frac=0.4,\n",
        "#     shuffle=True,\n",
        "#     random_state=42,\n",
        "#     drop_dup_on_text=True\n",
        "# )"
      ],
      "metadata": {
        "id": "sZ2dmVTf56mY"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "7qBhWi7xd0gW",
        "outputId": "e85d7af8-d0b7-4311-f98e-7a153caed0de"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         class                                       conversation\n",
              "idx                                                              \n",
              "0        협박 대화  지금 너 스스로를 죽여달라고 애원하는 것인가?\\n 아닙니다. 죄송합니다.\\n 죽을 ...\n",
              "1        협박 대화  길동경찰서입니다.\\n9시 40분 마트에 폭발물을 설치할거다.\\n네?\\n똑바로 들어 ...\n",
              "2    기타 괴롭힘 대화  너 되게 귀여운거 알지? 나보다 작은 남자는 첨봤어.\\n그만해. 니들 놀리는거 재미...\n",
              "3        갈취 대화  어이 거기\\n예??\\n너 말이야 너. 이리 오라고\\n무슨 일.\\n너 옷 좋아보인다?...\n",
              "4        갈취 대화  저기요 혹시 날이 너무 뜨겁잖아요? 저희 회사에서 이 선크림 파는데 한 번 손등에 ..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-84501c45-5f88-4ea0-b04a-a367855f5738\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>class</th>\n",
              "      <th>conversation</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>idx</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>협박 대화</td>\n",
              "      <td>지금 너 스스로를 죽여달라고 애원하는 것인가?\\n 아닙니다. 죄송합니다.\\n 죽을 ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>협박 대화</td>\n",
              "      <td>길동경찰서입니다.\\n9시 40분 마트에 폭발물을 설치할거다.\\n네?\\n똑바로 들어 ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>기타 괴롭힘 대화</td>\n",
              "      <td>너 되게 귀여운거 알지? 나보다 작은 남자는 첨봤어.\\n그만해. 니들 놀리는거 재미...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>갈취 대화</td>\n",
              "      <td>어이 거기\\n예??\\n너 말이야 너. 이리 오라고\\n무슨 일.\\n너 옷 좋아보인다?...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>갈취 대화</td>\n",
              "      <td>저기요 혹시 날이 너무 뜨겁잖아요? 저희 회사에서 이 선크림 파는데 한 번 손등에 ...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-84501c45-5f88-4ea0-b04a-a367855f5738')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-84501c45-5f88-4ea0-b04a-a367855f5738 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-84501c45-5f88-4ea0-b04a-a367855f5738');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-2dfb0f8f-4c1c-4fc6-8fc0-dcc589893916\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2dfb0f8f-4c1c-4fc6-8fc0-dcc589893916')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-2dfb0f8f-4c1c-4fc6-8fc0-dcc589893916 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "train_data",
              "summary": "{\n  \"name\": \"train_data\",\n  \"rows\": 4929,\n  \"fields\": [\n    {\n      \"column\": \"idx\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1423,\n        \"min\": 0,\n        \"max\": 4928,\n        \"num_unique_values\": 4929,\n        \"samples\": [\n          4774,\n          3398,\n          889\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"class\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"\\uae30\\ud0c0 \\uad34\\ub86d\\ud798 \\ub300\\ud654\",\n          \"\\uc77c\\ubc18 \\ub300\\ud654\",\n          \"\\uac08\\ucde8 \\ub300\\ud654\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"conversation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4768,\n        \"samples\": [\n          \"\\ubc14\\ubcf4\\uc57c \\ub10c \\uc774\\uac83\\ub3c4 \\ubaa8\\ub974\\ub0d0?\\n \\ubaa8\\ub97c\\uc218\\ub3c4 \\uc788\\uc9c0. \\uadf8\\ub7fc \\ub108\\ub294 \\ub2e4 \\uc544\\ub0d0?\\n \\ub09c \\ub2e4 \\uc54c\\uc544. \\ub108 \\uadf8\\ub7fc \\uc774\\uac70 \\ud480 \\uc218 \\uc788\\uc5b4?\\n \\uc774\\uac70 \\uc544\\uc9c1 \\uc548\\ubc30\\uc6b4\\uc796\\uc544.\\n \\uc774\\uac83\\ub3c4 \\ubaa8\\ub974\\ub0d0 \\uc774 \\ubcd1\\uc2e0\\uc544? \\uc694\\uc998\\uc5d4 \\ud559\\uc6d0\\uc5d0\\uc11c \\uc774\\uac70 \\ub2e4 \\ubc30\\uc6cc. \\uc544 \\ub9de\\ub2e4. \\ub108\\ub124\\uc9d1 \\uac70\\uc9c0\\ub77c\\uc11c \\ud559\\uc6d0 \\ubabb\\uac00\\uc9c0?\\n \\uac70\\uc9c0 \\uc544\\ub2c8\\uc57c.\\n \\uac70\\uc9c0 \\uc544\\ub2c8\\uc57c\\n \\ub530\\ub77c\\ud558\\uc9c0\\ub9c8!\\n \\ub530\\ub77c\\ud558\\uc9c0\\ub9c8 \\uc774 \\uc9c0\\ub784\\n \\ud558\\uc9c0\\ub9c8!\",\n          \"\\uc548\\ub155\\ud558\\uc138\\uc694 \\uace0\\uac1d\\ub2d8 \\ud3b8\\ud558\\uac8c \\uc785\\uc5b4\\ubcf4\\uc138\\uc694\\n\\ub124 \\uc5b8\\ub2c8 \\uc774\\uac70 \\uc785\\uc5b4\\ubd10\\ub3c4\\ub418\\uc694?\\n\\uc544 \\uace0\\uac1d\\ub2d8 \\uc774 \\uc637\\uc740 \\ub2c8\\ud2b8\\ub77c \\ucc29\\uc6a9\\uc774 \\ubd88\\uac00\\ud569\\ub2c8\\ub2e4\\n\\uc544\\ud734 \\uc800 \\ub0a0\\uc52c\\ud574\\uc11c \\uad1c\\ucc2e\\uc544\\uc694! \\uc800 \\uc9c4\\uc9dc \\uc785\\uc5b4\\ubcf4\\uace0 \\ub9c8\\uc74c\\uc5d0 \\ub4e4\\uba74 \\ubc14\\ub85c \\uc0ac\\ub824\\uace0\\ud574\\uc694 \\ud55c\\ubc88\\ub9cc \\uc785\\uc5b4\\ubcf4\\uac8c\\ud574\\uc8fc\\uc138\\uc694 \\n\\uc800 \\uc0ac\\uc7a5\\ub2d8\\uc774 \\uc54c\\uba74 \\ud63c\\ub098\\uc11c \\uc548\\ub3fc\\uc694 \\ub2e4\\ub978 \\uc0c9\\uc0c1 \\ucc29\\uc6a9\\uc740 \\uc5b4\\ub5a0\\uc138\\uc694?\\n\\uc544\\ub2e4\\ub978\\uac74 \\ubcc4\\ub860\\ub370 \\uc800 \\ud654\\uc7a5\\ud488\\ub3c4 \\uc548\\ubb3b\\uac8c \\uc785\\uc744\\uac8c\\uc694 \\ud55c\\ubc88\\ub9cc \\uc785\\uac8c\\ud574\\uc8fc\\uc138\\uc694\\n\\uc8c4\\uc1a1\\ud574\\uc694 \\n\\uc544\\uc9c4\\uc9dc \\ub4dc\\ub7fd\\uac8c \\uce58\\uc0ac\\ud558\\uac8c\\uad6c\\ub098 \\uc637 \\ud55c\\ubc88 \\uc785\\ub294\\uac00\\uac00\\uc9c0\\uace0 \\ubb50\\uc774\\ub807\\uac8c \\uad74\\uc5b4\\uc694????? \\uc5ec\\uae30 \\uc774\\ub798\\uc11c \\uc7a5\\uc0ac\\ud558\\uaca0\\uc5b4\\uc694??\\n\\uc8c4\\uc1a1\\ud574\\uc694 \\uaddc\\uce59\\uc774\\ub77c\\n\\uaddc\\uce59\\uac19\\uc740 \\uc18c\\ub9ac\\ud558\\ub124 \\uc5b8\\ub2c8 \\uc9c4\\uc9dc \\uc735\\ud1b5\\uc131\\uc5c6\\ub2e4\",\n          \"\\uc0ac\\uc7a5\\ub2d8 \\uc774\\ubc88\\uc5d0 \\uc0c8\\ub85c \\ub4e4\\uc5b4\\uc628 \\uce5c\\uad6c\\uc5d0\\uc694\\n\\uc548\\ub155\\ud558\\uc2ed\\ub2c8\\uae4c\\n\\uc5b4 \\uc77c\\uc798\\ud558\\uac8c \\uc0dd\\uacbc\\ub124.\\uad70\\ub300\\ub294 \\uac14\\ub2e4\\uc654\\ub098?\\n\\uc544\\ub2c8\\uc694.4\\uae09 \\ubc1b\\uc544\\uc11c \\uc0ac\\ud68c\\ubcf5\\ubb34\\uc694\\uc6d0 \\ud588\\uc2b5\\ub2c8\\ub2e4\\n\\ub0a8\\uc790\\uac00 \\uad70\\ub300\\ub294 \\uac14\\ub2e4\\uc640\\uc57c\\uc9c0.\\uadf8\\ub807\\uc9c0 \\uc54a\\ub098?\\n\\uadf8\\ub807\\uc8e0.\\uad70\\ub300\\ub3c4 \\uc548 \\uac14\\ub2e4\\uc624\\uba74 \\ub0a8\\uc790\\uac00 \\uc544\\ub2c8\\uc8e0\\n\\uc6b0\\ub9ac\\ub54c\\ub294 \\uad70\\ub300\\ub3c4 \\uc548\\uac14\\ub2e4\\uc624\\uba74 \\uc0ac\\ub78c \\ub300\\uc811\\ub3c4 \\ubabb\\ubc1b\\uc558\\ub294\\ub370 \\ucc38 \\uc138\\uc0c1 \\ud3b8\\ud574\\uc84c\\ub124\\n\\uc544 \\uadf8\\ub7ac\\uad70\\uc694\\n\\uad70\\ub300 \\uc548\\uac14\\ub2e4\\uc654\\uc6b0\\ub2c8 \\uac70\\uc758 \\uc7a1\\uc77c \\ud574\\ubcf8\\uc801\\uc774 \\uc5c6\\uaca0\\ub124 \\ub098\\uc911\\uc5d0 \\ud55c\\ubc88 \\ud68c\\uc0ac \\uc815\\uc6d0 \\uc7a1\\ucd08\\ub098 \\ubf51\\uc790\\uace0\\n\\ub124 \\uc54c\\uaca0\\uc2b5\\ub2c8\\ub2e4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "QYHeYLnxd3Ys",
        "outputId": "35eeafdd-67ae-41a8-a7fb-0ea908e4e93d"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                    text\n",
              "idx                                                     \n",
              "t_000  아가씨 담배한갑주소 네 4500원입니다 어 네 지갑어디갔지 에이 버스에서 잃어버렸나...\n",
              "t_001  우리팀에서 다른팀으로 갈 사람 없나? 그럼 영지씨가 가는건 어때?  네? 제가요? ...\n",
              "t_002  너 오늘 그게 뭐야 네 제가 뭘 잘못했나요.? 제대로 좀 하지 네 똑바로 좀 하지 ...\n",
              "t_003  이거 들어바 와 이 노래 진짜 좋다 그치 요즘 이 것만 들어 진짜 너무 좋다 내가 ...\n",
              "t_004  아무튼 앞으로 니가 내 와이파이야. .응 와이파이 온. 켰어. 반말? 주인님이라고도..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-913b3a44-f7f8-4dc3-b5b7-3d1a926281f5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>idx</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>t_000</th>\n",
              "      <td>아가씨 담배한갑주소 네 4500원입니다 어 네 지갑어디갔지 에이 버스에서 잃어버렸나...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>t_001</th>\n",
              "      <td>우리팀에서 다른팀으로 갈 사람 없나? 그럼 영지씨가 가는건 어때?  네? 제가요? ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>t_002</th>\n",
              "      <td>너 오늘 그게 뭐야 네 제가 뭘 잘못했나요.? 제대로 좀 하지 네 똑바로 좀 하지 ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>t_003</th>\n",
              "      <td>이거 들어바 와 이 노래 진짜 좋다 그치 요즘 이 것만 들어 진짜 너무 좋다 내가 ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>t_004</th>\n",
              "      <td>아무튼 앞으로 니가 내 와이파이야. .응 와이파이 온. 켰어. 반말? 주인님이라고도...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-913b3a44-f7f8-4dc3-b5b7-3d1a926281f5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-913b3a44-f7f8-4dc3-b5b7-3d1a926281f5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-913b3a44-f7f8-4dc3-b5b7-3d1a926281f5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ff56b100-2fe9-47eb-abae-5f10f7677a40\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ff56b100-2fe9-47eb-abae-5f10f7677a40')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ff56b100-2fe9-47eb-abae-5f10f7677a40 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "test_data",
              "summary": "{\n  \"name\": \"test_data\",\n  \"rows\": 500,\n  \"fields\": [\n    {\n      \"column\": \"idx\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 500,\n        \"samples\": [\n          \"t_361\",\n          \"t_073\",\n          \"t_374\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 499,\n        \"samples\": [\n          \"\\ub0b4\\uc77c \\ubaa8\\ub808\\uae4c\\uc9c0 \\ucc9c\\ub9cc\\uc6d0 \\ub354 \\uc900\\ube44\\ud574\\uc8fc\\uc138\\uc694 \\ub124? \\uc774\\ubc88\\ub2ec\\uc740 \\uc774\\ubbf8 \\uc6d0\\ud558\\uc2dc\\ub294 \\uae08\\uc561 \\ub2e4 \\ub9de\\ucdb0\\ub4dc\\ub838\\uc796\\uc544\\uc694 \\uc6b0\\ub9ac \\uc0ac\\uc774 \\uae08\\uc561\\uc5d0 \\uc0c1\\ud55c\\uac00\\uac00 \\uc5b4\\ub528\\uc2b5\\ub2c8\\uae4c \\uadf8\\ub54c\\uadf8\\ub54c \\uc0c1\\ud669\\uc5d0 \\ub2e4\\ub978\\uac70 \\uc544\\uc2dc\\uc796\\uc544\\uc694 \\uc800 \\uc815\\ub9d0 \\uc774\\ubc88\\ub2ec\\uc5d0 \\ub4dc\\ub9b0\\uac8c \\ub2e4\\uc5d0\\uc694. \\ud604\\uae08 \\ub354 \\ub9cc\\ub4e4\\ub798\\ub3c4 \\ub9cc\\ub4e4 \\uc218\\uac00 \\uc5c6\\uc2b5\\ub2c8\\ub2e4 \\uc815\\ub9d0\\uc774\\uc5d0\\uc694 \\uc774\\uc81c \\uaca8\\uc6b0 \\uc790\\ub9ac \\uc7a1\\uc740 \\ub538\\uc790\\uc2dd \\uc55e\\uae38 \\ub9dd\\uac00\\ub728\\ub9ac\\uace0 \\uc2f6\\ub098\\ubcf4\\ub124? \\ud55c\\ubc88\\ub9cc \\uc0b4\\ub824\\uc8fc\\uc2ed\\uc1fc \\uc81c \\ub538\\ub9cc\\uc740 \\uac74\\ub4e4\\uc9c0 \\ub9d0\\uc544\\uc8fc\\uc2ed\\uc1fc. \\ub9e4\\ubc88 \\uc774\\ub807\\uac8c \\ubd80\\ud0c1\\ub9cc \\ud558\\uba74 \\ub0b4\\uac00 \\uc5b4\\ub5bb\\uac8c \\ub4e4\\uc5b4\\uc8fc\\ub098 \\ub2e4\\uc74c\\ub2ec\\uc5d0 \\uc5b4\\ub5bb\\uac8c\\ub4e0 \\ucc44\\uc6cc\\ubcfc\\ud14c\\ub2c8 \\uc774\\ubc88\\ub9cc \\uc0b4\\ub824\\uc8fc\\uc2ed\\uc1fc \\uc81c\\ubc1c \\ub3c8\\uc774 \\uc5c6\\uc73c\\uba74 \\ubab8\\uc73c\\ub85c\\ub77c\\ub3c4 \\ub5bc\\uc6cc \\uadf8\\ub7fc \\ubab8\\ub6b1\\uc774 \\ud558\\ub098\\ub85c \\ub3c8 \\ubc8c\\uc5b4 \\uba39\\uace0 \\uc0b4\\uace0 \\uc788\\uc2b5\\ub2c8\\ub2e4. \\uc81c\\ubc1c \\uc774\\ubc88\\ub9cc \\uc880 \\ubd10\\uc8fc\\uc2ed\\uc2dc\\uc624\",\n          \"\\uc218\\ubbfc \\uc528 \\uc544\\uce68\\uc5d0 \\uc77c\\ucc0d \\uc880 \\uc624\\uc138\\uc694  \\uc800 \\uc9c0\\uac01 \\uc548\\ud588\\uc2b5\\ub2c8\\ub2e4  \\uc544\\ub2c8 \\uc2e0\\uc785\\uc774\\uba74 1\\uc2dc\\uac04 \\uc77c\\ucc0d \\uc640\\uc57c\\uc9c0  \\ub124?  \\uc694\\uc998 \\uc560\\ub4e4\\uc740 \\uae30\\ubcf8\\uc774 \\uc5c6\\uc5b4 \\uc77c\\ucc0d \\uc640\\uc11c \\ucee4\\ud53c\\ub3c4 \\ud0c0\\uace0 \\uc815\\ub9ac\\ub3c4 \\ud574\\ub193\\uace0 \\uadf8\\ub798\\uc57c\\uc9c0  \\uadf8\\uac74 \\ubd80\\ub2f9\\ud558\\ub2e4\\uace0 \\uc0dd\\uac01\\ud569\\ub2c8\\ub2e4  \\uc774\\uac83 \\ubd10 \\ubc14\\ub85c \\ub9d0\\ub300\\uafb8\\uc57c  \\ub9d0\\ub300\\uafb8\\ub77c\\ub1e8?  \\uc5ed\\uc2dc \\uc2f8\\uac00\\uc9c0\\uac00 \\uc5c6\\uc5b4 \\uc218\\ubbfc \\uc528\\ub294 \\ud68c\\uc0ac \\uc9e7\\uac8c \\ub2e4\\ub2c8\\uace0 \\uc2f6\\uc740\\uac00 \\ubcf4\\ub124  \\uc9c0\\uae08 \\ubb34\\uc2a8 \\ub9d0\\uc500\\uc744 \\ud558\\uc2dc\\ub294\\uc9c0 \\ubaa8\\ub974\\uaca0\\ub124\\uc694\",\n          \"\\uc5ec\\ub7ec\\ubd84 \\uc8fc\\ub2d8\\uc740 \\ucc38 \\uc790\\ube44\\ub85c\\uc6b0\\uc2e0 \\uac83 \\uac19\\uc544\\uc694 \\ub0a8\\ub4e4\\uc774 \\uc608\\uc218\\ub77c\\uba74 \\ub2e4 \\uc8fd\\uc5ec\\ubc84\\ub838\\uc744 \\ud150\\ub370 \\ucc38 \\uc6c3\\uae30\\uace0 \\uc790\\ube60\\uc84c\\ub124 \\uc2e0\\ub3c4 \\ub2d8\\ub4e4 \\uc800 \\uc2e0\\ub3c4\\ub97c \\uc7a1\\uc73c\\uc138\\uc694 \\uc544\\ub2c8 \\uc65c \\uadf8\\ub7ec\\uc138\\uc694 \\uc774\\uac70 \\ub194 \\uc790 \\ub0b4\\uac00 \\uce7c\\uc744 \\uc904\\ud14c\\ub2c8 \\ud68c\\uacc4\\ud558\\uace0 \\uc790\\uacb0\\ud574 \\ub10c \\uc77c\\ucc0d \\ucc9c\\uad6d\\uc73c\\ub85c \\ubcf4\\ub0b4\\uc8fc\\ub294 \\uac70\\uc57c \\uc544\\ub2c8\\uba74 \\ub0b4\\uac00 \\uc8fd\\uc5ec\\uc11c \\uc9c0\\uc625\\uc73c\\ub85c \\ubcf4\\ub0bc\\uc218\\ub3c4 \\uc788\\uc73c\\ub2c8 \\uc544\\ub2c8 \\uc65c \\uadf8\\ub7ec\\uc138\\uc694? \\uc0ac\\uc774\\ube44\\uc5d0\\uc694? \\uc774\\uac70 \\ub194\\uc694 \\uc774 \\ubc84\\ub7ec\\uc9c0\\uac19\\uc740 \\uc0ac\\ud0c4\\uc774 \\ub9de\\uc744\\ub77c\\uace0 \\uc0b4\\ub824\\uc8fc\\uc138\\uc694 \\ub3c4\\uc640\\uc8fc\\uc138\\uc694\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 데이터 프레임 정보 확인 (열, 결측치 등)\n",
        "print(train_data.info())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DS1Sy9XKrpgz",
        "outputId": "f000f642-1948-42bb-ba59-bd085f0dcde2"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 4929 entries, 0 to 4928\n",
            "Data columns (total 2 columns):\n",
            " #   Column        Non-Null Count  Dtype \n",
            "---  ------        --------------  ----- \n",
            " 0   class         4929 non-null   object\n",
            " 1   conversation  4929 non-null   object\n",
            "dtypes: object(2)\n",
            "memory usage: 115.5+ KB\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class_counts = train_data.groupby('class').size()\n",
        "print(class_counts)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8zJk6vEcd4qx",
        "outputId": "19ec6748-1987-4498-811e-68bec602e9c0"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "class\n",
            "갈취 대화           981\n",
            "기타 괴롭힘 대화      1094\n",
            "일반 대화           979\n",
            "직장 내 괴롭힘 대화     979\n",
            "협박 대화           896\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 'class' 열의 고유값별 개수 세기\n",
        "class_counts = train_data['class'].value_counts()\n",
        "\n",
        "# 결과 출력\n",
        "print(\"클래스별 데이터 개수:\\n\", class_counts)\n",
        "\n",
        "# 비율 계산 및 출력\n",
        "class_proportions = train_data['class'].value_counts(normalize=True) * 100\n",
        "print(\"\\n클래스별 데이터 비율 (%):\\n\", class_proportions)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pchVoGkNr47g",
        "outputId": "d395066e-a872-42b7-ed17-d308002b0984"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "클래스별 데이터 개수:\n",
            " class\n",
            "기타 괴롭힘 대화      1094\n",
            "갈취 대화           981\n",
            "직장 내 괴롭힘 대화     979\n",
            "일반 대화           979\n",
            "협박 대화           896\n",
            "Name: count, dtype: int64\n",
            "\n",
            "클래스별 데이터 비율 (%):\n",
            " class\n",
            "기타 괴롭힘 대화      22.195171\n",
            "갈취 대화          19.902617\n",
            "직장 내 괴롭힘 대화    19.862041\n",
            "일반 대화          19.862041\n",
            "협박 대화          18.178129\n",
            "Name: proportion, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train = train_data['conversation']\n",
        "y_train = train_data['class']"
      ],
      "metadata": {
        "id": "PRTVdtobgb3m"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 데이터 길이, 클래스 분포 확인"
      ],
      "metadata": {
        "id": "r6gIBvEihaf9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# 5개 클래스 이름 (원하는 순서대로 나열)\n",
        "classes = [\n",
        "    \"협박 대화\",\n",
        "    \"갈취 대화\",\n",
        "    \"직장 내 괴롭힘 대화\",\n",
        "    \"기타 괴롭힘 대화\",\n",
        "    \"일반 대화\"\n",
        "]\n",
        "\n",
        "# 2행 3열 subplot 생성\n",
        "fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(18, 8))\n",
        "\n",
        "# axes를 1차원 리스트로 변환\n",
        "axes = axes.flatten()\n",
        "\n",
        "# 각 클래스별 히스토그램 그리기\n",
        "for i, cls in enumerate(classes):\n",
        "    axes[i].hist([len(s) for s in train_data['conversation'][train_data['class'] == cls]], bins=50)\n",
        "    axes[i].set_xlabel('length of samples')\n",
        "    axes[i].set_ylabel('number of samples')\n",
        "    axes[i].set_title(cls)\n",
        "\n",
        "# 남는 subplot 숨기기 (2×3=6개 중 1개는 비어있음)\n",
        "for j in range(len(classes), len(axes)):\n",
        "    fig.delaxes(axes[j])\n",
        "\n",
        "plt.subplots_adjust(wspace=0.3, hspace=0.5)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "y6bvZmUxha11",
        "outputId": "7dabccef-7081-4fc6-bdaf-13f958f2bf86"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54801 (\\N{HANGUL SYLLABLE HYEOB}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48149 (\\N{HANGUL SYLLABLE BAG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45824 (\\N{HANGUL SYLLABLE DAE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 54868 (\\N{HANGUL SYLLABLE HWA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44040 (\\N{HANGUL SYLLABLE GAL}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 52712 (\\N{HANGUL SYLLABLE CWI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51649 (\\N{HANGUL SYLLABLE JIG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51109 (\\N{HANGUL SYLLABLE JANG}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 45236 (\\N{HANGUL SYLLABLE NAE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44340 (\\N{HANGUL SYLLABLE GOE}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 47213 (\\N{HANGUL SYLLABLE ROB}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 55192 (\\N{HANGUL SYLLABLE HIM}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 53440 (\\N{HANGUL SYLLABLE TA}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 51068 (\\N{HANGUL SYLLABLE IL}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n",
            "/usr/local/lib/python3.12/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 48152 (\\N{HANGUL SYLLABLE BAN}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x800 with 5 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from collections import Counter\n",
        "import re\n",
        "\n",
        "# 불용어(stop_words) 목록 정의 (조사, 접속사 등)\n",
        "# 일단은 작은 불용어 사전을 이용하여 빈도수 측정\n",
        "stop_words = ['은', '는', '이', '가', '다', '을', '를', '에', '와', '과', '에서']\n",
        "\n",
        "# 텍스트 전처리 및 키워드 추출 함수\n",
        "def get_keywords(text):\n",
        "    text = re.sub(r'[^가-힣\\s]', '', text) # 한글과 공백만 남기기\n",
        "    words = text.split()\n",
        "    return [word for word in words if word not in stop_words and len(word) > 1] # 불용어 및 한 글자 단어 제거\n",
        "\n",
        "# 각 클래스별 키워드 빈도 분석\n",
        "for cls in train_data['class'].unique():\n",
        "    class_df = train_data[train_data['class'] == cls]\n",
        "    all_text = ' '.join(class_df['conversation'])\n",
        "    keywords = get_keywords(all_text)\n",
        "\n",
        "    # 상위 10개 키워드 출력\n",
        "    print(f\"\\n--- {cls}의 주요 키워드 ---\")\n",
        "    print(Counter(keywords).most_common(10))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NLzSxxhehrYo",
        "outputId": "67eae8a2-19f2-4774-975f-4985ca9fc9ab"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- 협박 대화의 주요 키워드 ---\n",
            "[('내가', 923), ('제발', 397), ('지금', 337), ('진짜', 311), ('그냥', 241), ('니가', 241), ('그래', 228), ('죄송합니다', 222), ('아니', 219), ('그럼', 208)]\n",
            "\n",
            "--- 기타 괴롭힘 대화의 주요 키워드 ---\n",
            "[('내가', 647), ('진짜', 440), ('아니', 375), ('그냥', 314), ('그래', 245), ('지금', 233), ('아니야', 225), ('그렇게', 223), ('무슨', 222), ('니가', 218)]\n",
            "\n",
            "--- 갈취 대화의 주요 키워드 ---\n",
            "[('내가', 704), ('진짜', 400), ('그럼', 366), ('이거', 362), ('아니', 343), ('지금', 316), ('그래', 273), ('돈이', 255), ('없어', 241), ('그냥', 237)]\n",
            "\n",
            "--- 직장 내 괴롭힘 대화의 주요 키워드 ---\n",
            "[('죄송합니다', 840), ('내가', 535), ('아니', 389), ('제가', 386), ('지금', 324), ('그럼', 275), ('오늘', 243), ('부장님', 239), ('무슨', 217), ('그렇게', 199)]\n",
            "\n",
            "--- 일반 대화의 주요 키워드 ---\n",
            "[('좋아해', 1062), ('정말', 470), ('주로', 416), ('영화', 412), ('있어', 403), ('자주', 330), ('주말에', 330), ('어때', 312), ('많이', 282), ('여행', 272)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install datasets"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XvqPUStVvFif",
        "outputId": "3e913891-8389-4571-b94c-7e6d27fd41b9"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: datasets in /usr/local/lib/python3.12/dist-packages (4.0.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.12/dist-packages (from datasets) (3.19.1)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.12/dist-packages (from datasets) (2.0.2)\n",
            "Requirement already satisfied: pyarrow>=15.0.0 in /usr/local/lib/python3.12/dist-packages (from datasets) (18.1.0)\n",
            "Requirement already satisfied: dill<0.3.9,>=0.3.0 in /usr/local/lib/python3.12/dist-packages (from datasets) (0.3.8)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.12/dist-packages (from datasets) (2.2.2)\n",
            "Requirement already satisfied: requests>=2.32.2 in /usr/local/lib/python3.12/dist-packages (from datasets) (2.32.4)\n",
            "Requirement already satisfied: tqdm>=4.66.3 in /usr/local/lib/python3.12/dist-packages (from datasets) (4.67.1)\n",
            "Requirement already satisfied: xxhash in /usr/local/lib/python3.12/dist-packages (from datasets) (3.5.0)\n",
            "Requirement already satisfied: multiprocess<0.70.17 in /usr/local/lib/python3.12/dist-packages (from datasets) (0.70.16)\n",
            "Requirement already satisfied: fsspec<=2025.3.0,>=2023.1.0 in /usr/local/lib/python3.12/dist-packages (from fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (2025.3.0)\n",
            "Requirement already satisfied: huggingface-hub>=0.24.0 in /usr/local/lib/python3.12/dist-packages (from datasets) (0.34.4)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.12/dist-packages (from datasets) (25.0)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.12/dist-packages (from datasets) (6.0.2)\n",
            "Requirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /usr/local/lib/python3.12/dist-packages (from fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (3.12.15)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.12/dist-packages (from huggingface-hub>=0.24.0->datasets) (4.14.1)\n",
            "Requirement already satisfied: hf-xet<2.0.0,>=1.1.3 in /usr/local/lib/python3.12/dist-packages (from huggingface-hub>=0.24.0->datasets) (1.1.7)\n",
            "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.12/dist-packages (from requests>=2.32.2->datasets) (3.4.3)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.12/dist-packages (from requests>=2.32.2->datasets) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.12/dist-packages (from requests>=2.32.2->datasets) (2.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.12/dist-packages (from requests>=2.32.2->datasets) (2025.8.3)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.12/dist-packages (from pandas->datasets) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.12/dist-packages (from pandas->datasets) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.12/dist-packages (from pandas->datasets) (2025.2)\n",
            "Requirement already satisfied: aiohappyeyeballs>=2.5.0 in /usr/local/lib/python3.12/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (2.6.1)\n",
            "Requirement already satisfied: aiosignal>=1.4.0 in /usr/local/lib/python3.12/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (1.4.0)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.12/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (25.3.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.12/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (1.7.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.12/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (6.6.4)\n",
            "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.12/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (0.3.2)\n",
            "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.12/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.3.0,>=2023.1.0->datasets) (1.20.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.8.2->pandas->datasets) (1.17.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# kc_electra_accelerate_safe_colab.py\n",
        "# -------------------------------------------------------------\n",
        "# Colab-ready: KcELECTRA 한국어 대화 5분류 (Accelerate + AMP + Linear Probe)\n",
        "# - x_train, y_train 이 이미 메모리에 있으면 사용\n",
        "# - 없으면 데모 데이터 자동 생성하여 즉시 실행 가능\n",
        "# - 안전한 Accelerator 초기화, 혼합정밀 자동 선택(bf16/ fp16 / cpu)\n",
        "# - 인코더 동결 옵션(빠른 수렴), 클래스가중치, scheduler, best ckpt 저장\n",
        "# -------------------------------------------------------------\n",
        "\n",
        "import os, math, types, numpy as np\n",
        "from typing import List, Sequence\n",
        "from collections import Counter\n",
        "\n",
        "# ============= 0) 설치(Colab) =============\n",
        "# (필요시 자동 설치; 이미 설치되어 있으면 빠르게 통과)\n",
        "try:\n",
        "    import torch, transformers, accelerate, datasets, safetensors\n",
        "except Exception:\n",
        "    !pip -q install \"torch>=2.1\" \"transformers>=4.41\" \"accelerate>=0.30\" \"datasets>=2.19\" \"safetensors>=0.4\" scikit-learn\n",
        "    import torch, transformers, accelerate, datasets, safetensors\n",
        "\n",
        "# ============= 1) 기본 import =============\n",
        "import numpy as np\n",
        "import torch\n",
        "from torch import nn\n",
        "from torch.utils.data import DataLoader\n",
        "\n",
        "from datasets import Dataset\n",
        "from accelerate import Accelerator\n",
        "from accelerate.utils import ProjectConfiguration, set_seed\n",
        "from accelerate.state import AcceleratorState\n",
        "from transformers import (\n",
        "    AutoTokenizer, AutoModelForSequenceClassification,\n",
        "    DataCollatorWithPadding, get_linear_schedule_with_warmup\n",
        ")\n",
        "from safetensors.torch import save_file, load_file\n",
        "from tqdm.auto import tqdm\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, f1_score, confusion_matrix, classification_report\n",
        "\n",
        "# ============= 2) 사용자 데이터(or 데모) =============\n",
        "# 기대 형식:\n",
        "#   x_train: 1D 시퀀스(str들) 길이 N\n",
        "#   y_train: 1D 시퀀스(레이블 str들) 길이 N\n",
        "# 메모리에 없으면 데모 데이터 생성\n",
        "if \"x_train\" not in globals() or \"y_train\" not in globals():\n",
        "    print(\"[WARN] x_train / y_train 이 없어 데모 데이터를 생성합니다.\")\n",
        "    demo_labels = ['협박 대화','갈취 대화','직장 내 괴롭힘 대화','기타 괴롭힘 대화','일반 대화']\n",
        "    demo_texts = [\n",
        "        \"지금 당장 돈 보내, 아니면 가만 안 둔다.\",           # 협박\n",
        "        \"점심값 네가 내. 지난번에도 내가 냈잖아.\",           # 갈취?\n",
        "        \"보고서 오늘 밤까지 내. 못 내면 평가 낮출게.\",       # 직장 내 괴롭힘\n",
        "        \"그렇게 하면 안 되지? 계속 그러면 알려버릴 거야.\",     # 기타 괴롭힘\n",
        "        \"오늘 날씨 좋다. 커피 마실래?\",                    # 일반\n",
        "    ]\n",
        "    x_train = demo_texts * 200  # 1000 샘플\n",
        "    y_train = [demo_labels[0], demo_labels[1], demo_labels[2], demo_labels[3], demo_labels[4]] * 200\n",
        "\n",
        "# numpy/pandas/리스트 모두 허용 -> 리스트로 통일\n",
        "def _to_list(x: Sequence):\n",
        "    if hasattr(x, \"tolist\"):\n",
        "        try:\n",
        "            return x.tolist()\n",
        "        except Exception:\n",
        "            pass\n",
        "    return list(x)\n",
        "\n",
        "x_train = _to_list(x_train)\n",
        "y_train = _to_list(y_train)\n",
        "\n",
        "# 라벨셋 파악(사용자 정의가 있으면 그대로, 아니면 존재 라벨로 정의)\n",
        "unique_labels = sorted(list({str(y) for y in y_train}))\n",
        "EXPECTED_LABELS = ['협박 대화','갈취 대화','직장 내 괴롭힘 대화','기타 괴롭힘 대화','일반 대화']\n",
        "LABELS = EXPECTED_LABELS if set(EXPECTED_LABELS).issubset(set(unique_labels)) else unique_labels\n",
        "\n",
        "label2id = {l:i for i,l in enumerate(LABELS)}\n",
        "id2label = {i:l for l,i in label2id.items()}\n",
        "\n",
        "# ============= 3) 설정 =============\n",
        "SEED = 42\n",
        "MODEL_ID = \"beomi/KcELECTRA-base-v2022\"\n",
        "MAX_LEN = 400\n",
        "\n",
        "# Linear Probe(빠름) / Full finetune(느리지만 최고성능 가능)\n",
        "FREEZE_ENCODER = True\n",
        "\n",
        "EPOCHS = 10\n",
        "BATCH_TR = 64 if torch.cuda.is_available() else 16\n",
        "BATCH_EV = 128 if torch.cuda.is_available() else 32\n",
        "ACCUM_STEPS = 1\n",
        "\n",
        "LR = 3e-4 if FREEZE_ENCODER else 2e-5\n",
        "WEIGHT_DECAY = 0.0 if FREEZE_ENCODER else 0.01\n",
        "WARMUP_RATIO = 0.05\n",
        "MAX_GRAD_NORM = 1.0\n",
        "\n",
        "# Colab 경고/메모리 단편화 억제\n",
        "os.environ.setdefault(\"PYTORCH_CUDA_ALLOC_CONF\", \"expandable_segments:True\")\n",
        "os.environ.setdefault(\"TRANSFORMERS_NO_ADVISORY_WARNINGS\", \"1\")\n",
        "\n",
        "# ============= 4) Accelerator 안전 초기화 =============\n",
        "def init_accelerator_safely(accum_steps: int) -> Accelerator:\n",
        "    \"\"\"\n",
        "    Accelerator를 안전하게 초기화:\n",
        "      1) bf16(가능)/fp16/cpu 순으로 혼합정밀 후보 선택\n",
        "      2) 실패 시 mp 미지정으로 재시도\n",
        "      3) 상태가 꼬였으면 AcceleratorState._reset_state()가 있으면 호출 후 재시도\n",
        "    \"\"\"\n",
        "    # 희망 혼합정밀 결정\n",
        "    if torch.cuda.is_available():\n",
        "        desired_mp = \"bf16\" if torch.cuda.is_bf16_supported() else \"fp16\"\n",
        "    else:\n",
        "        desired_mp = \"no\"\n",
        "\n",
        "    # 환경변수로 override(있다면)\n",
        "    env_mp = os.environ.get(\"ACCELERATE_MIXED_PRECISION\")\n",
        "    if env_mp:\n",
        "        desired_mp = env_mp\n",
        "\n",
        "    def _build(mp):\n",
        "        kwargs = dict(\n",
        "            gradient_accumulation_steps=accum_steps,\n",
        "            project_config=ProjectConfiguration(project_dir=\"kc_out\", logging_dir=\"kc_logs\"),\n",
        "            log_with=None,\n",
        "        )\n",
        "        if mp is not None and mp != \"no\":\n",
        "            kwargs[\"mixed_precision\"] = mp\n",
        "        return Accelerator(**kwargs)\n",
        "\n",
        "    # 1) 원하는 mp로 시도\n",
        "    try:\n",
        "        return _build(desired_mp)\n",
        "    except Exception as e:\n",
        "        print(f\"[ACCELERATE] 1st try ({desired_mp}) failed: {type(e).__name__}: {e}\")\n",
        "\n",
        "    # 2) mp 미지정\n",
        "    try:\n",
        "        return _build(None)\n",
        "    except Exception as e:\n",
        "        print(f\"[ACCELERATE] 2nd try (no mp) failed: {type(e).__name__}: {e}\")\n",
        "\n",
        "    # 3) 상태 리셋(가능할 때만) 후 재시도\n",
        "    try:\n",
        "        if hasattr(AcceleratorState, \"_reset_state\"):\n",
        "            AcceleratorState._reset_state()\n",
        "            print(\"[ACCELERATE] AcceleratorState reset executed.\")\n",
        "    except Exception as e:\n",
        "        print(f\"[ACCELERATE] reset_state failed (ignored): {e}\")\n",
        "\n",
        "    try:\n",
        "        return _build(desired_mp)\n",
        "    except Exception as e:\n",
        "        print(f\"[ACCELERATE] 3rd try ({desired_mp}) failed: {type(e).__name__}: {e}\")\n",
        "        return _build(None)\n",
        "\n",
        "accelerator = init_accelerator_safely(ACCUM_STEPS)\n",
        "device = accelerator.device\n",
        "set_seed(SEED)\n",
        "accelerator.print(f\"[INFO] device={device} | mixed_precision={accelerator.mixed_precision} | \"\n",
        "                  f\"MAX_LEN={MAX_LEN} | BATCH_TR={BATCH_TR} | ACCUM={ACCUM_STEPS}\")\n",
        "\n",
        "# ============= 5) 데이터 준비 =============\n",
        "X_tr, X_val, y_tr, y_val = train_test_split(\n",
        "    x_train, y_train, test_size=0.15, random_state=SEED, stratify=y_train\n",
        ")\n",
        "\n",
        "tok = AutoTokenizer.from_pretrained(MODEL_ID, use_fast=True)\n",
        "\n",
        "def preprocess(batch):\n",
        "    return tok(batch[\"text\"], truncation=True, max_length=MAX_LEN)\n",
        "\n",
        "train_ds = Dataset.from_dict({\"text\": list(X_tr), \"label\": [label2id[str(y)] for y in y_tr]})\n",
        "valid_ds = Dataset.from_dict({\"text\": list(X_val), \"label\": [label2id[str(y)] for y in y_val]})\n",
        "\n",
        "# 빠른 토크나이즈 (환경에 따라 멀티프로세싱 실패 가능 → 단일로 폴백)\n",
        "try:\n",
        "    train_ds = train_ds.map(preprocess, batched=True, remove_columns=[\"text\"], num_proc=4)\n",
        "    valid_ds = valid_ds.map(preprocess, batched=True, remove_columns=[\"text\"], num_proc=4)\n",
        "except Exception:\n",
        "    train_ds = train_ds.map(preprocess, batched=True, remove_columns=[\"text\"])\n",
        "    valid_ds = valid_ds.map(preprocess, batched=True, remove_columns=[\"text\"])\n",
        "\n",
        "collator = DataCollatorWithPadding(tokenizer=tok, padding=\"longest\")\n",
        "\n",
        "# ============= 6) 모델/옵티마/스케줄러 =============\n",
        "model = AutoModelForSequenceClassification.from_pretrained(\n",
        "    MODEL_ID, num_labels=len(LABELS), id2label=id2label, label2id=label2id\n",
        ")\n",
        "\n",
        "# Linear Probe: 인코더 동결\n",
        "if FREEZE_ENCODER:\n",
        "    base = getattr(model, \"electra\", None) or getattr(model, \"base_model\", None)\n",
        "    if base is not None:\n",
        "        for p in base.parameters():\n",
        "            p.requires_grad = False\n",
        "\n",
        "# 클래스 불균형 가중치\n",
        "class_counts = np.bincount([label2id[str(y)] for y in y_tr], minlength=len(LABELS))\n",
        "w = (class_counts.sum() / np.clip(class_counts, 1, None))\n",
        "w = w / w.mean()\n",
        "criterion = nn.CrossEntropyLoss(weight=torch.tensor(w, dtype=torch.float))\n",
        "\n",
        "# Optimizer/Scheduler\n",
        "optimizer = torch.optim.AdamW(filter(lambda p: p.requires_grad, model.parameters()),\n",
        "                              lr=LR, weight_decay=WEIGHT_DECAY)\n",
        "\n",
        "# DataLoader 옵션 (CPU에서 pin/persistent 사용 금지)\n",
        "loader_kwargs = dict(\n",
        "    num_workers=(4 if torch.cuda.is_available() else 0),\n",
        "    pin_memory=bool(torch.cuda.is_available()),\n",
        "    persistent_workers=bool(torch.cuda.is_available()),\n",
        ")\n",
        "\n",
        "train_loader = DataLoader(train_ds, batch_size=BATCH_TR, shuffle=True,  collate_fn=collator, **loader_kwargs)\n",
        "valid_loader = DataLoader(valid_ds, batch_size=BATCH_EV, shuffle=False, collate_fn=collator, **loader_kwargs)\n",
        "\n",
        "steps_per_epoch = math.ceil(len(train_loader) / ACCUM_STEPS)\n",
        "num_training_steps = EPOCHS * steps_per_epoch\n",
        "scheduler = get_linear_schedule_with_warmup(\n",
        "    optimizer,\n",
        "    num_warmup_steps=int(WARMUP_RATIO * num_training_steps),\n",
        "    num_training_steps=num_training_steps\n",
        ")\n",
        "\n",
        "# TF32 허용(속도 ↑, 정확도 영향 미미)\n",
        "if torch.cuda.is_available():\n",
        "    torch.backends.cuda.matmul.allow_tf32 = True\n",
        "    try: torch.set_float32_matmul_precision(\"high\")\n",
        "    except Exception: pass\n",
        "\n",
        "# Accelerate 준비\n",
        "model, optimizer, train_loader, valid_loader, scheduler = accelerator.prepare(\n",
        "    model, optimizer, train_loader, valid_loader, scheduler\n",
        ")\n",
        "criterion = criterion.to(device)\n",
        "\n",
        "# AMP 설정 (CUDA일 때만)\n",
        "use_amp = (device.type == \"cuda\")\n",
        "amp_dtype = torch.bfloat16 if (use_amp and torch.cuda.is_bf16_supported()) else torch.float16\n",
        "use_scaler = (use_amp and amp_dtype == torch.float16)\n",
        "scaler = torch.cuda.amp.GradScaler(enabled=use_scaler)\n",
        "\n",
        "# ============= 7) 평가 함수 =============\n",
        "def evaluate():\n",
        "    model.eval()\n",
        "    preds_all, labels_all = [], []\n",
        "    with torch.no_grad():\n",
        "        for batch in valid_loader:\n",
        "            labels = batch.pop(\"labels\").to(device, non_blocking=True)\n",
        "            inputs = {k: v.to(device, non_blocking=True) for k, v in batch.items()}\n",
        "            with torch.autocast(device_type=\"cuda\", dtype=amp_dtype, enabled=use_amp):\n",
        "                logits = model(**inputs).logits\n",
        "                preds = logits.argmax(dim=1)\n",
        "            preds_all.append(accelerator.gather_for_metrics(preds))\n",
        "            labels_all.append(accelerator.gather_for_metrics(labels))\n",
        "\n",
        "    y_hat = torch.cat(preds_all).cpu().numpy()\n",
        "    y_true = torch.cat(labels_all).cpu().numpy()\n",
        "    acc = accuracy_score(y_true, y_hat)\n",
        "    mf1 = f1_score(y_true, y_hat, average=\"macro\")\n",
        "    return acc, mf1, y_true, y_hat\n",
        "\n",
        "# ============= 8) 학습 루프 =============\n",
        "best_mf1, best_path = -1.0, \"kc_out/best_accelerate.safetensors\"\n",
        "os.makedirs(\"kc_out\", exist_ok=True)\n",
        "\n",
        "for epoch in range(1, EPOCHS + 1):\n",
        "    model.train()\n",
        "    running = 0.0\n",
        "    pbar = tqdm(train_loader, disable=not accelerator.is_local_main_process,\n",
        "                desc=f\"Epoch {epoch}/{EPOCHS}\")\n",
        "\n",
        "    for step, batch in enumerate(pbar, start=1):\n",
        "        with accelerator.accumulate(model):\n",
        "            labels = batch.pop(\"labels\").to(device, non_blocking=True)\n",
        "            inputs = {k: v.to(device, non_blocking=True) for k, v in batch.items()}\n",
        "\n",
        "            if use_scaler:\n",
        "                with torch.autocast(device_type=\"cuda\", dtype=amp_dtype, enabled=True):\n",
        "                    logits = model(**inputs).logits\n",
        "                    loss = criterion(logits, labels)\n",
        "                scaler.scale(loss).backward()\n",
        "                scaler.unscale_(optimizer)\n",
        "                accelerator.clip_grad_norm_(model.parameters(), MAX_GRAD_NORM)\n",
        "                scaler.step(optimizer)\n",
        "                scaler.update()\n",
        "                optimizer.zero_grad(set_to_none=True)\n",
        "                scheduler.step()\n",
        "            else:\n",
        "                with torch.autocast(device_type=\"cuda\", dtype=amp_dtype, enabled=use_amp):\n",
        "                    logits = model(**inputs).logits\n",
        "                    loss = criterion(logits, labels)\n",
        "                accelerator.backward(loss)\n",
        "                accelerator.clip_grad_norm_(model.parameters(), MAX_GRAD_NORM)\n",
        "                optimizer.step()\n",
        "                optimizer.zero_grad(set_to_none=True)\n",
        "                scheduler.step()\n",
        "\n",
        "            running += loss.detach().float().item()\n",
        "            if accelerator.is_local_main_process:\n",
        "                pbar.set_postfix(loss=round(running/step, 4))\n",
        "\n",
        "    acc, mf1, y_true, y_hat = evaluate()\n",
        "    accelerator.print(f\"[Eval] epoch={epoch}  acc={acc:.4f}  macroF1={mf1:.4f}\")\n",
        "    if accelerator.is_local_main_process and mf1 > best_mf1:\n",
        "        best_mf1 = mf1\n",
        "        state = accelerator.get_state_dict(model)\n",
        "        save_file(state, best_path)\n",
        "        accelerator.print(f\"  ↳ New best saved to {best_path}\")\n",
        "\n",
        "# ============= 9) 최종 리포트 =============\n",
        "if accelerator.is_local_main_process:\n",
        "    try:\n",
        "        state = load_file(best_path)\n",
        "        model.load_state_dict(state, strict=False)\n",
        "    except Exception as e:\n",
        "        print(f\"[WARN] best ckpt load failed (use last weights): {e}\")\n",
        "\n",
        "    acc, mf1, y_true, y_hat = evaluate()\n",
        "    print(\"Final Accuracy:\", acc)\n",
        "    print(\"Final Macro-F1:\", mf1)\n",
        "    print(classification_report(y_true, y_hat, target_names=LABELS, digits=4))\n",
        "    print(\"Confusion matrix:\\n\", confusion_matrix(y_true, y_hat))\n",
        "\n",
        "# ============= 10) 추론 함수 =============\n",
        "def infer(texts: List[str], batch_size: int = 64):\n",
        "    # 단일 문자열도 리스트로 통일\n",
        "    if isinstance(texts, str):\n",
        "        texts = [texts]\n",
        "\n",
        "    model.eval()\n",
        "    preds = []\n",
        "    for i in range(0, len(texts), batch_size):\n",
        "        chunk = texts[i:i+batch_size]\n",
        "        batch = tok(\n",
        "            chunk,\n",
        "            truncation=True,\n",
        "            padding=True,           # ★ 중요: 배치 텐서 길이 맞추기\n",
        "            max_length=MAX_LEN,\n",
        "            return_tensors=\"pt\"\n",
        "        )\n",
        "        batch = {k: v.to(device) for k, v in batch.items()}\n",
        "        with torch.no_grad(), torch.autocast(device_type=\"cuda\", dtype=amp_dtype, enabled=(device.type==\"cuda\")):\n",
        "            logits = model(**batch).logits\n",
        "            ids = logits.argmax(dim=1).cpu().tolist()\n",
        "            preds.extend(ids)\n",
        "\n",
        "    return [LABELS[i] for i in preds]\n"
      ],
      "metadata": {
        "id": "2WSrEfh6rxK4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 245,
          "referenced_widgets": [
            "3e22733ad67745df804e391e05dad5c5",
            "27bbb63e19854c679a010a41359b9bfa",
            "f9b3549ae94b4ab48e407a5e5cc252d7",
            "31f38382fe684f1c89f4b5225d2be4fa",
            "5421ce5316d344fdb02635fe90d66da8",
            "ba1c5c1350b64b88ba5acd2263de382a",
            "1b15d6af3f8e498c818a76bc17ec283a",
            "f0b77217e66f4d8fa93d78c9b68fe640",
            "13e57dbdbf4f4a5781d88c31edb0c230",
            "5e7c0a513bd64315b9c39edf12430170",
            "dd6161d550e4424f82f82220e59a6633",
            "f8300f446a964ad6a97dbadc1b2c228b",
            "84f14f7b6e314655af8db8fa0a7ae9b5",
            "0136e56de3244c65b1beb6330e645b35",
            "a3abc1d054b44e0e90d3491ab9fe5c3c",
            "8074871b36ec4ff285a04e0307fc345d",
            "1064b868fefc4030961d460db4d6111e",
            "948ff56819644080935f5a590071e66f",
            "d4df063782b34a1cb0136bb12112cc67",
            "7dfb5007e89a4ec498fe6adc51d9b111",
            "971b813874a142f99687169f583d40f6",
            "39c2cf3ef38e476eb11534ce298108e9",
            "f9af9572a4e149a2a467027654ffc941",
            "1ead4b2cd15e4d8b9422312063b30264",
            "19157c73984542d69232de1c95d98f73",
            "25aaceccce844618b3e02752693c5dab",
            "0bf61157ffdb44df89cce22a1afc9993",
            "0e847aeaf6324bb8a89a827cd24467da",
            "3211e43810034d8cb191e0c8a7a42fda",
            "1c546f6c7f4f4f668ba7df0f20adc5d9",
            "314aab8f6d534684aa05ee0ac8eccafc",
            "37cfdd62366a4852a3a157b0f81008fd",
            "7b14cd3202234af381b8644813b78ffd"
          ]
        },
        "outputId": "9b3d0a6f-56f9-42f7-d7f1-6216e755cd02"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[INFO] device=cuda | mixed_precision=bf16 | MAX_LEN=400 | BATCH_TR=64 | ACCUM=1\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Map (num_proc=4):   0%|          | 0/4189 [00:00<?, ? examples/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "3e22733ad67745df804e391e05dad5c5"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Map (num_proc=4):   0%|          | 0/740 [00:00<?, ? examples/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "f8300f446a964ad6a97dbadc1b2c228b"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of ElectraForSequenceClassification were not initialized from the model checkpoint at beomi/KcELECTRA-base-v2022 and are newly initialized: ['classifier.dense.bias', 'classifier.dense.weight', 'classifier.out_proj.bias', 'classifier.out_proj.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n",
            "/tmp/ipython-input-3345465797.py:242: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.\n",
            "  scaler = torch.cuda.amp.GradScaler(enabled=use_scaler)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Epoch 1/10:   0%|          | 0/66 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "f9af9572a4e149a2a467027654ffc941"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Eval] epoch=1  acc=0.5757  macroF1=0.5437\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 사용 예:\n",
        "infer([\"점심값 네가 내. 항상 그랬듯이\", \"오늘 회의는 3시에 시작한다고!\"])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8qvtQvvAdmn-",
        "outputId": "8ccd6dda-54be-4fac-aedd-9d9ac05f06f9"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['갈취 대화', '일반 대화']"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# (학습 때와 동일하게) 라벨 순서/매핑\n",
        "LABELS = ['협박 대화','갈취 대화','직장 내 괴롭힘 대화','기타 괴롭힘 대화','일반 대화']\n",
        "label2id = {l:i for i,l in enumerate(LABELS)}\n",
        "\n",
        "def to_label_ids(preds):\n",
        "    \"\"\"\n",
        "    preds 예시 케이스 처리:\n",
        "    - [2,0,4,...]  -> 그대로 int 배열\n",
        "    - [\"일반 대화\", \"협박 대화\", ...] -> label2id로 매핑\n",
        "    - [[p0..p4], [p0..p4], ...] (확률/로짓) -> argmax\n",
        "    - np.array shape (N,5) -> argmax(axis=1)\n",
        "    - np.array shape (N,)  -> int로 캐스팅 시도\n",
        "    \"\"\"\n",
        "    if isinstance(preds, np.ndarray):\n",
        "        if preds.ndim == 2:\n",
        "            return preds.argmax(axis=1).astype(int)\n",
        "        elif preds.ndim == 1:\n",
        "            # 이미 정수/정수형 문자열일 수 있음\n",
        "            try:\n",
        "                return preds.astype(int)\n",
        "            except Exception:\n",
        "                # 문자열 라벨일 수도\n",
        "                return np.array([label2id[str(x)] for x in preds], dtype=int)\n",
        "\n",
        "    # list 계열\n",
        "    if len(preds) == 0:\n",
        "        return np.array([], dtype=int)\n",
        "\n",
        "    first = preds[0]\n",
        "\n",
        "    # 2D 리스트(확률/로짓)\n",
        "    if isinstance(first, (list, tuple, np.ndarray)):\n",
        "        arr = np.asarray(preds)\n",
        "        if arr.ndim == 2:\n",
        "            return arr.argmax(axis=1).astype(int)\n",
        "        else:\n",
        "            # 예외적 케이스는 1D로 캐스팅 시도\n",
        "            return arr.astype(int)\n",
        "\n",
        "    # 문자열 라벨\n",
        "    if isinstance(first, str):\n",
        "        return np.array([label2id[x] for x in preds], dtype=int)\n",
        "\n",
        "    # 정수/넘파이스칼라 등\n",
        "    return np.array(preds, dtype=int)\n",
        "\n",
        "# 1) test.csv 읽기\n",
        "test_df = pd.read_csv(\"data/test.csv\")\n",
        "\n",
        "# 2) id/idx 컬럼 감지 → 제출은 id로 통일\n",
        "if \"id\" in test_df.columns:\n",
        "    out_id = test_df[\"id\"]\n",
        "elif \"idx\" in test_df.columns:\n",
        "    out_id = test_df[\"idx\"]\n",
        "else:\n",
        "    out_id = pd.Series(range(len(test_df)), name=\"id\")\n",
        "\n",
        "# 3) 텍스트 준비\n",
        "texts = test_df[\"text\"].fillna(\"\").tolist()\n",
        "\n",
        "# 4) 예측 (infer는 앞서 만든 padding=True 포함 버전)\n",
        "raw_preds = infer(texts, batch_size=64)  # infer는 문자열/정수/확률 어떤 형태든 가능\n",
        "pred_ids = to_label_ids(raw_preds)       # ★ 0~4 정수로 정규화\n",
        "\n",
        "# 5) submission.csv 저장 (id,label)\n",
        "submission = pd.DataFrame({\"id\": out_id, \"label\": pred_ids})\n",
        "submission.to_csv(\"data/submission.csv\", index=False, encoding=\"utf-8-sig\")\n",
        "print(\"✅ submission.csv 저장 완료:\", submission.shape, submission.head())\n"
      ],
      "metadata": {
        "id": "68RMcW-4u1Qo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2587ce02-0af1-47aa-adb1-fd440ffc205d"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ submission.csv 저장 완료: (500, 2)       id  label\n",
            "0  t_000      1\n",
            "1  t_001      2\n",
            "2  t_002      0\n",
            "3  t_003      3\n",
            "4  t_004      1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "_dHo_NkaIL-G"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
